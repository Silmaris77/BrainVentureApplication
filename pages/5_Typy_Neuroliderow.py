# -*- coding: utf-8 -*-
import streamlit as st
import json
import os
import sys
from datetime import datetime

# Page config must be the first Streamlit command
st.set_page_config(
    page_title="Typy Neurolider√≥w", 
    page_icon="üë•",
    layout="wide"
)

# Add the project root to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.ui import card
from utils.navigation import hide_streamlit_navigation, create_sidebar_navigation
from components.theme_switcher import initialize_theme, create_theme_switcher, get_current_theme
from utils.neuroleader_types import NeuroleaderTypes

# Hide default Streamlit navigation
hide_streamlit_navigation()

# Initialize and apply theme
initialize_theme()

# Create sidebar navigation
create_sidebar_navigation("Typy Neurolider√≥w")

# Add theme switcher to sidebar
st.sidebar.markdown("### Zmie≈Ñ styl interfejsu")
theme_changed = create_theme_switcher(st.sidebar)
if theme_changed:
    st.rerun()  # Rerun app to apply theme changes

# Initialize neuroleader types manager
neuroleader_manager = NeuroleaderTypes()

# Initialize session state
if "page" not in st.session_state:
    st.session_state.page = "overview"  # 'overview', 'test', 'type_details', 'results'

if "selected_type" not in st.session_state:
    st.session_state.selected_type = None

if "test_results" not in st.session_state:
    st.session_state.test_results = None

# Helper functions
def go_to_overview():
    st.session_state.page = "overview"
    
def go_to_test():
    st.session_state.page = "test"
    
def go_to_type_details(type_id):
    st.session_state.page = "type_details"
    st.session_state.selected_type = type_id
    
def go_to_results():
    st.session_state.page = "results"

# Create tabs
tab1, tab2, tab3 = st.tabs(["PrzeglƒÖd Typ√≥w", "Test", "Tw√≥j Profil"])

# Tab 1: PrzeglƒÖd Typ√≥w
with tab1:
    # Check if we're in type details view
    if st.session_state.page == "type_details" and st.session_state.selected_type:
        # Show type details
        type_id = st.session_state.selected_type
        type_info = neuroleader_manager.get_type_by_id(type_id)
        
        if type_info:
            # Add back button
            if st.button("‚Üê Powr√≥t do przeglƒÖdu typ√≥w"):
                go_to_overview()
                st.rerun()
                
            # Show type header
            st.markdown(f"# {type_info['icon']} {type_info['name']}")
            
            # Show full description
            neuroleader_manager.render_full_description(type_id)
        else:
            st.error("Nie znaleziono informacji o wybranym typie.")
            if st.button("Wr√≥ƒá do przeglƒÖdu typ√≥w"):
                go_to_overview()
                st.rerun()
    else:
        # Show overview of all types
        st.markdown("# Typy Neurolider√≥w")
        st.markdown("""
        Poznaj 6 typ√≥w neurolider√≥w, kt√≥re wyr√≥≈ºniamy w naszym podej≈õciu do przyw√≥dztwa opartym na neurobiologii.
        Ka≈ºdy z nas ma dominujƒÖcy typ, ale wszyscy mamy cechy ka≈ºdego z nich w r√≥≈ºnym stopniu.
        """)
        
        # Display all types in a grid
        for i, type_info in enumerate(neuroleader_manager.get_all_types()):
            with st.container():
                st.markdown("---")
                neuroleader_manager.render_type_card(type_info["id"])
                
                # Button to view details
                if st.button(f"Poznaj szczeg√≥≈Çy typu {type_info['name']}", key=f"btn_details_{i}"):
                    go_to_type_details(type_info["id"])
                    st.rerun()

# Tab 2: Test
with tab2:
    st.markdown("# Test Typologii Neurolider√≥w")
    
    if st.session_state.page == "test":
        # Show test form
        submit_clicked = neuroleader_manager.display_test_form()
        
        if submit_clicked:
            # Calculate results
            answers = {
                q_id: st.session_state[f"question_{q_id}"]
                for q_id in [q["id"] for q in neuroleader_manager.get_test_questions()]
            }
            
            # Process test results
            try:
                results = neuroleader_manager.calculate_test_results(answers)
                st.session_state.test_results = results
                
                # Try to save results to user data
                try:
                    neuroleader_manager.save_test_results("user", results)
                    st.success("Wyniki testu zosta≈Çy zapisane!")
                except Exception as e:
                    st.success("Test zosta≈Ç wype≈Çniony! Przejd≈∫ do zak≈Çadki 'Tw√≥j Profil', aby zobaczyƒá wyniki.")
                    st.warning(f"Uwaga: WystƒÖpi≈Ç problem podczas zapisywania wynik√≥w testu: {e}")
            except Exception as e:
                st.error(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania wynik√≥w testu: {e}")
    else:
        # Show introduction to the test
        st.markdown("""
        Ten test pomo≈ºe Ci odkryƒá Tw√≥j dominujƒÖcy typ neuroliderski oraz zrozumieƒá, jak Tw√≥j m√≥zg 
        wp≈Çywa na Tw√≥j styl przyw√≥dztwa.
        
        Test sk≈Çada siƒô z 30 pyta≈Ñ i zajmie oko≈Ço 10-15 minut.
        """)
        
        if st.button("Rozpocznij test"):
            go_to_test()
            st.rerun()

# Tab 3: Tw√≥j Profil
with tab3:
    st.markdown("# Tw√≥j Profil Neuroliderski")
    
    # Zmienna do kontrolowania przep≈Çywu
    should_display_results = False
    dominant_type = None
    secondary_type = None
    results = None
    
    # Prze≈ÇƒÖcznik miƒôdzy aktualnymi wynikami a historiƒÖ test√≥w
    show_history = st.checkbox("Poka≈º historiƒô test√≥w", value=False)
    
    if show_history:
        # Wy≈õwietl historiƒô test√≥w
        neuroleader_manager.display_test_history()
        
        if st.button("Wr√≥ƒá do aktualnych wynik√≥w"):
            st.session_state.show_history = False
            st.rerun()
    elif "test_results" in st.session_state and st.session_state.test_results is not None:
        results = st.session_state.test_results
        
        # Sprawdzamy czy results ma wymagane pola
        if not isinstance(results, dict) or "dominant_type" not in results:
            st.error("Nieprawid≈Çowy format wynik√≥w testu.")
            if st.button("Wykonaj test ponownie"):
                st.session_state.test_results = None
                go_to_test()
                st.rerun()
        else:
            error_occurred = False
            
            try:
                # Pobierz informacje o dominujƒÖcym i drugorzƒôdnym typie
                dominant_type = neuroleader_manager.get_type_by_id(results["dominant_type"])
                if "secondary_type" in results and results["secondary_type"]:
                    secondary_type = neuroleader_manager.get_type_by_id(results["secondary_type"])
            except Exception as e:
                error_occurred = True
                st.error(f"B≈ÇƒÖd podczas pobierania informacji o typach: {str(e)}")
                if st.button("Wykonaj test ponownie"):
                    st.session_state.test_results = None
                    go_to_test()
                    st.rerun()
            
            # Sprawd≈∫ czy dominant_type zosta≈Ç poprawnie zidentyfikowany
            if not error_occurred and not dominant_type:
                error_occurred = True
                st.error("Nie uda≈Ço siƒô za≈Çadowaƒá informacji o dominujƒÖcym typie neuroliderskim.")
                if st.button("Wykonaj test ponownie"):
                    st.session_state.test_results = None
                    go_to_test()
                    st.rerun()
            
            # Wy≈õwietl wyniki tylko je≈õli nie by≈Ço b≈Çƒôd√≥w
            if not error_occurred and dominant_type:
                should_display_results = True
    else:
        st.info("Nie masz jeszcze wynik√≥w testu typologii neurolider√≥w.")
        if st.button("Wykonaj test teraz"):
            go_to_test()
            st.rerun()
    
    # Wy≈õwietl wyniki tylko je≈õli wszystko posz≈Ço dobrze
    if should_display_results and dominant_type and results:
        # Wy≈õwietl g≈Ç√≥wny wynik
        st.markdown(f"## Tw√≥j dominujƒÖcy typ: {dominant_type['icon']} {dominant_type['name']}")
        st.markdown(dominant_type["short_description"])
        
        # Wykres radarowy wynik√≥w
        st.markdown("### Tw√≥j profil neuroliderski")
        neuroleader_manager.render_radar_chart(results)
        
        # Wy≈õwietl informacje o drugorzƒôdnym typie je≈õli jest dostƒôpny
        if secondary_type:
            st.markdown(f"### Tw√≥j drugorzƒôdny typ: {secondary_type['icon']} {secondary_type['name']}")
            st.markdown(secondary_type["short_description"])
        
        # Interpretacje wynik√≥w
        st.markdown("### Interpretacja wynik√≥w")
        if "interpretations" in results and isinstance(results["interpretations"], dict):
            for type_id, interpretation in results["interpretations"].items():
                type_info = neuroleader_manager.get_type_by_id(type_id)
                if type_info and "scores" in results and type_id in results["scores"]:
                    with st.expander(f"{type_info['icon']} {type_info['name']}: {interpretation}"):
                        st.markdown(f"Wynik: **{results['scores'][type_id]:.1f}/5.0**")
                        resources = neuroleader_manager.get_resources_for_type(type_id)
                        
                        if resources:
                            st.markdown("#### Zalecane materia≈Çy rozwojowe:")
                            
                            # Wy≈õwietl zalecane kursy
                            if resources.get("kursy"):
                                st.markdown("**Kursy:**")
                                for course in resources["kursy"]:
                                    st.markdown(f"* {course}")
                            
                            # Wy≈õwietl zalecane ksiƒÖ≈ºki
                            if resources.get("ksiƒÖ≈ºki"):
                                st.markdown("**KsiƒÖ≈ºki:**")
                                for book in resources["ksiƒÖ≈ºki"]:
                                    st.markdown(f"* {book}")
        
        # Przyciski akcji
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Wykonaj test ponownie", key="btn_retest_profile"):
                st.session_state.test_results = None
                go_to_test()
                st.rerun()
                
        with col2:
            if st.button("Zapisz wyniki", key="btn_save_profile"):
                try:
                    success = neuroleader_manager.save_test_results("user", results)
                    if success:
                        st.success("Wyniki zosta≈Çy zapisane pomy≈õlnie!")
                    else:
                        st.error("Nie uda≈Ço siƒô zapisaƒá wynik√≥w.")
                except Exception as e:
                    st.error(f"WystƒÖpi≈Ç b≈ÇƒÖd podczas zapisywania wynik√≥w: {e}")
