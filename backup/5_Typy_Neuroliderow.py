# -*- coding: utf-8 -*-
import streamlit as st
import json
import os
import sys
from datetime import datetime

# Page config must be the first Streamlit command
st.set_page_config(
    page_title="Typy Neurolider√≥w", 
    page_icon="üë•",
    layout="wide"
)

# Add the project root to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.ui import set_theme, card
from utils.navigation import hide_streamlit_navigation, create_sidebar_navigation
from components.theme_switcher import initialize_theme, create_theme_switcher, get_current_theme
# Import NeuroleaderTypes class
from utils.neuroleader_types import NeuroleaderTypes

# Hide default Streamlit navigation
hide_streamlit_navigation()

# Initialize and apply theme
initialize_theme()

# Create sidebar navigation
create_sidebar_navigation("Typy Neurolider√≥w")

# Add theme switcher to sidebar
st.sidebar.markdown("### Zmie≈Ñ styl interfejsu")
theme_changed = create_theme_switcher(st.sidebar)
if theme_changed:
    st.rerun()  # Rerun app to apply theme changes

# Initialize neuroleader types manager
neuroleader_manager = NeuroleaderTypes()

# Initialize session state
if "page" not in st.session_state:
    st.session_state.page = "overview"  # 'overview', 'test', 'type_details', 'results'

if "selected_type" not in st.session_state:
    st.session_state.selected_type = None

if "test_results" not in st.session_state:
    st.session_state.test_results = None

# Functions for navigation
def go_to_overview():
    st.session_state.page = "overview"
    
def go_to_test():
    st.session_state.page = "test"
    
def go_to_type_details(type_id):
    st.session_state.selected_type = type_id
    st.session_state.page = "type_details"
    
def go_to_results():
    st.session_state.page = "results"

# Create tab navigation
tab1, tab2, tab3 = st.tabs(["üìö Typologia Neurolider√≥w", "üß† Test Typu", "üìä Tw√≥j Profil"])

# Main content - Tab 1: Typologia
with tab1:
    if st.session_state.page == "overview":
        st.markdown("# Typologia Neurolider√≥w")
        st.markdown("""
        Poznaj sze≈õƒá typ√≥w neurolider√≥w, kt√≥re opisujƒÖ r√≥≈ºne style przyw√≥dztwa z perspektywy neurobiologicznej.
        Ka≈ºdy typ ma swoje unikalne mocne strony, wyzwania i neurobiologiczne podstawy.
        
        Odkryj, kt√≥ry typ najlepiej opisuje Tw√≥j styl przyw√≥dztwa!
        """)
        
        # Podzia≈Ç na dwie kolumny dla lepszego uk≈Çadu
        left_col, right_col = st.columns(2)
        
        # Wy≈õwietl wszystkie typy w uk≈Çadzie dwukolumnowym
        types = neuroleader_manager.get_all_types()
        for i, type_info in enumerate(types):
            if i % 2 == 0:
                with left_col:
                    st.markdown("---")
                    neuroleader_manager.render_type_card(type_info["id"])
                    if st.button(f"Poznaj szczeg√≥≈Çy typu {type_info['name'].split('‚Äì')[0]}", key=f"btn_l_{type_info['id']}"):
                        go_to_type_details(type_info["id"])
            else:
                with right_col:
                    st.markdown("---")
                    neuroleader_manager.render_type_card(type_info["id"])
                    if st.button(f"Poznaj szczeg√≥≈Çy typu {type_info['name'].split('‚Äì')[0]}", key=f"btn_r_{type_info['id']}"):
                        go_to_type_details(type_info["id"])
        
        # Dodaj przycisk do testu
        st.markdown("---")
        st.markdown("## Odkryj sw√≥j typ neuroliderski")
        st.markdown("Wype≈Çnij nasz test, aby dowiedzieƒá siƒô, kt√≥ry typ neuroliderski najlepiej opisuje Tw√≥j styl przyw√≥dztwa.")
        if st.button("Przejd≈∫ do testu", key="btn_go_to_test"):
            go_to_test()
            st.rerun()
    
    elif st.session_state.page == "type_details":
        # Pobierz szczeg√≥≈Çy wybranego typu
        selected_type = neuroleader_manager.get_type_by_id(st.session_state.selected_type)
        
        # Przycisk powrotu
        if st.button("‚Üê Powr√≥t do wszystkich typ√≥w"):
            go_to_overview()
            st.rerun()
        
        # Wy≈õwietl szczeg√≥≈Çowy opis typu
        if selected_type:
            neuroleader_manager.render_full_description(selected_type["id"])
        else:
            st.error("Nie znaleziono wybranego typu neuroliderskiego!")
            go_to_overview()
            st.rerun()

# Tab 2: Test Typu
with tab2:
    st.markdown("# Test Typologii Neurolider√≥w")
    
    if st.session_state.test_results:
        st.success("Gratulacje! Test zosta≈Ç ju≈º wype≈Çniony. Mo≈ºesz zobaczyƒá wyniki w zak≈Çadce 'Tw√≥j Profil'.")
        if st.button("Wype≈Çnij test ponownie"):
            st.session_state.test_results = None
            st.rerun()
    else:
        # Wy≈õwietl formularz testu
        submit = neuroleader_manager.display_test_form()
        
        if submit:
            # Oblicz wyniki testu
            results = neuroleader_manager.calculate_test_results(st.session_state.neuroleader_test_answers)
            st.session_state.test_results = results
            
            # Zapisz wyniki do profilu u≈ºytkownika
            try:
                success = neuroleader_manager.save_test_results("current_user", results)
                if success:
                    st.success("Test zosta≈Ç wype≈Çniony i zapisany w Twoim profilu! Przejd≈∫ do zak≈Çadki 'Tw√≥j Profil', aby zobaczyƒá wyniki.")
                else:
                    st.success("Test zosta≈Ç wype≈Çniony! Przejd≈∫ do zak≈Çadki 'Tw√≥j Profil', aby zobaczyƒá wyniki.")
                    st.warning("Uwaga: Nie uda≈Ço siƒô zapisaƒá wynik√≥w testu w Twoim profilu.")
            except Exception as e:
                st.success("Test zosta≈Ç wype≈Çniony! Przejd≈∫ do zak≈Çadki 'Tw√≥j Profil', aby zobaczyƒá wyniki.")
                st.warning(f"Uwaga: WystƒÖpi≈Ç problem podczas zapisywania wynik√≥w testu: {e}")

# Tab 3: Tw√≥j Profil
with tab3:
    st.markdown("# Tw√≥j Profil Neuroliderski")
      # Prze≈ÇƒÖcznik miƒôdzy aktualnymi wynikami a historiƒÖ test√≥w
    show_history = st.checkbox("Poka≈º historiƒô test√≥w", value=False)
    if show_history:
        # Wy≈õwietl historiƒô test√≥w
        neuroleader_manager.display_test_history()
        
        if st.button("Wr√≥ƒá do aktualnych wynik√≥w"):
            st.rerun()
    elif st.session_state.test_results:
        results = st.session_state.test_results
        
        # Sprawdzamy czy results ma wymagane pola
        if not isinstance(results, dict) or "dominant_type" not in results:
            st.error("Nieprawid≈Çowy format wynik√≥w testu.")
            st.button("Wykonaj test ponownie", on_click=lambda: setattr(st.session_state, "test_results", None))
            return
        
        try:
            # Pobierz informacje o dominujƒÖcym i drugorzƒôdnym typie
            dominant_type = neuroleader_manager.get_type_by_id(results["dominant_type"])
            secondary_type = None
            if "secondary_type" in results and results["secondary_type"]:
                secondary_type = neuroleader_manager.get_type_by_id(results["secondary_type"])
        except Exception as e:
            st.error(f"B≈ÇƒÖd podczas pobierania informacji o typach: {str(e)}")
            st.button("Wykonaj test ponownie", on_click=lambda: setattr(st.session_state, "test_results", None))
            return
        
        if not dominant_type:
            st.error("Nie uda≈Ço siƒô za≈Çadowaƒá informacji o dominujƒÖcym typie neuroliderskim.")
            if st.button("Wykonaj test ponownie"):
                st.session_state.test_results = None
                go_to_test()
                st.rerun()
            return
        
        # Wy≈õwietl g≈Ç√≥wny wynik
        st.markdown(f"## Tw√≥j dominujƒÖcy typ: {dominant_type['icon']} {dominant_type['name']}")
        st.markdown(dominant_type["short_description"])
        
        # Wykres radarowy wynik√≥w
        st.markdown("### Tw√≥j profil neuroliderski")
        neuroleader_manager.render_radar_chart(results)
        
        # Wy≈õwietl szczeg√≥≈Çowe wyniki
        st.markdown("### Szczeg√≥≈Çowe wyniki")
        
        # Przygotuj dane dla tabeli wynik√≥w
        types_data = []
        for type_info in neuroleader_manager.get_all_types():
            type_id = type_info["id"]
            score = results["scores"].get(type_id, 0)
            interpretation = results["interpretations"].get(type_id, "")
            
            types_data.append({
                "Typ": f"{type_info['icon']} {type_info['name']}",
                "Wynik (1-5)": round(score, 2),
                "Interpretacja": interpretation
            })
        
        # Wy≈õwietl tabelƒô
        import pandas as pd
        df = pd.DataFrame(types_data)
        st.dataframe(df, hide_index=True, use_container_width=True)
        
        # Podziel na dwie kolumny dla lepszej prezentacji
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### Charakterystyka dominujƒÖcego typu")
            st.markdown(f"**{dominant_type['name']}**")
            st.markdown(f"**Supermoc:** {dominant_type.get('supermoc', '')}")
            st.markdown(f"**S≈Çabo≈õƒá:** {dominant_type.get('slabo≈õƒá', '')}")
            st.markdown(f"**Neurobiologia:** {dominant_type.get('neurobiologia', '')}")
            
            if st.button("Zobacz pe≈Çny opis dominujƒÖcego typu"):
                go_to_type_details(dominant_type["id"])
                st.rerun()
        
        with col2:
            if secondary_type:
                st.markdown("### Wp≈Çyw drugorzƒôdnego typu")
                st.markdown(f"**{secondary_type['name']}**")
                st.markdown("Tw√≥j styl przyw√≥dztwa zawiera r√≥wnie≈º cechy drugorzƒôdnego typu, co wzbogaca Tw√≥j profil neuroliderski.")
                st.markdown(f"**Supermoc:** {secondary_type.get('supermoc', '')}")
                
                if st.button("Zobacz pe≈Çny opis drugorzƒôdnego typu"):
                    go_to_type_details(secondary_type["id"])
                    st.rerun()
        
        # Rekomendacje rozwojowe
        st.markdown("---")
        st.markdown("### Rekomendacje rozwojowe")
        
        # Dynamiczne rekomendacje w zale≈ºno≈õci od typu
        if dominant_type["id"] == "neuroanalityk":
            st.markdown("""
            1. **Ustaw jasne deadline'y** - aby prze≈Çamaƒá tendencjƒô do nadmiernej analizy
            2. **Praktykuj szybkie podejmowanie decyzji** - zacznij od ma≈Çych, codziennych wybor√≥w
            3. **Stosuj zasadƒô 80/20** - 80% informacji czƒôsto wystarcza do podjƒôcia dobrej decyzji
            4. **Znajd≈∫ zaufanƒÖ osobƒô do konsultacji** - kt√≥ra pomo≈ºe Ci prze≈Çamaƒá impas decyzyjny
            5. **Prowad≈∫ dziennik decyzji** - notuj swoje decyzje i ich konsekwencje, aby uczyƒá siƒô na do≈õwiadczeniach
            """)
        elif dominant_type["id"] == "neuroreaktor":
            st.markdown("""
            1. **Wprowad≈∫ zasadƒô pauzy** - odczekaj przynajmniej 10 minut przed podjƒôciem wa≈ºnej decyzji
            2. **Praktykuj techniki mindfulness** - aby lepiej zarzƒÖdzaƒá reakcjami emocjonalnymi
            3. **Otaczaj siƒô osobami o analitycznym podej≈õciu** - kt√≥re bƒôdƒÖ r√≥wnowa≈ºyƒá TwojƒÖ impulsywno≈õƒá
            4. **Korzystaj z list kontrolnych** - aby nie pomijaƒá istotnych aspekt√≥w w stresujƒÖcych sytuacjach
            5. **Prowad≈∫ dziennik emocji** - aby lepiej rozumieƒá swoje wzorce reagowania na stres
            """)
        elif dominant_type["id"] == "neurobalanser":
            st.markdown("""
            1. **Rozwijaj jeszcze bardziej swojƒÖ inteligencjƒô emocjonalnƒÖ** - to Twoja naturalna si≈Ça
            2. **Ucz siƒô szybszego podejmowania decyzji** - aby nie utknƒÖƒá w analizie zbyt wielu perspektyw
            3. **Dziel siƒô swoim zbalansowanym podej≈õciem z innymi** - mo≈ºesz byƒá cennym mentorem
            4. **Eksperymentuj z bardziej zdecydowanym stylem** - czasem potrzebna jest szybka decyzja
            5. **Pog≈Çƒôbiaj wiedzƒô o neurobiologii przyw√≥dztwa** - aby jeszcze lepiej rozumieƒá mechanizmy stojƒÖce za Twoim stylem
            """)
        elif dominant_type["id"] == "neuroempata":
            st.markdown("""
            1. **Rozwijaj umiejƒôtno≈õci analityczne** - aby r√≥wnowa≈ºyƒá swoje naturalne nastawienie na emocje
            2. **Ucz siƒô asertywno≈õci** - aby m√≥c podejmowaƒá trudne decyzje mimo emocjonalnych koszt√≥w
            3. **Ustanawiaj jasne granice** - aby chroniƒá siebie przed emocjonalnym wypaleniem
            4. **Praktykuj podejmowanie decyzji w oparciu o dane** - nawet je≈õli poczƒÖtkowo wydaje siƒô to niekomfortowe
            5. **Buduj zr√≥≈ºnicowany zesp√≥≈Ç** - z osobami o bardziej analitycznym podej≈õciu
            """)
        elif dominant_type["id"] == "neuroinnowator":
            st.markdown("""
            1. **Rozwijaj cierpliwo≈õƒá i konsekwencjƒô** - aby doprowadzaƒá swoje innowacyjne pomys≈Çy do ko≈Ñca
            2. **Wprowad≈∫ strukturƒô do swojego procesu innowacji** - aby skuteczniej wdra≈ºaƒá nowe pomys≈Çy
            3. **Ucz siƒô lepszej komunikacji swoich wizji** - aby skuteczniej anga≈ºowaƒá innych
            4. **Wprowad≈∫ regularne momenty refleksji** - aby oceniaƒá efektywno≈õƒá wprowadzanych zmian
            5. **Pracuj nad umiejƒôtno≈õciami budowania konsensusu** - aby zwiƒôkszyƒá szansƒô na przyjƒôcie Twoich innowacyjnych rozwiƒÖza≈Ñ
            """)
        elif dominant_type["id"] == "neuroinspirator":
            st.markdown("""
            1. **Rozwijaj umiejƒôtno≈õci s≈Çuchania** - aby lepiej rozumieƒá potrzeby zespo≈Çu
            2. **Ucz siƒô dzia≈Çania opartego na danych** - aby r√≥wnowa≈ºyƒá swojƒÖ charyzmƒô faktami
            3. **Buduj struktury wspierajƒÖce realizacjƒô Twoich wizji** - aby Twoje inspirujƒÖce idee zosta≈Çy wdro≈ºone
            4. **Pracuj nad samo≈õwiadomo≈õciƒÖ** - aby lepiej rozumieƒá wp≈Çyw swojej charyzmy na innych
            5. **Deleguj odpowiedzialno≈õƒá** - aby budowaƒá autonomiƒô i zaanga≈ºowanie w zespole
            """)
        
        # Materia≈Çy i zasoby do rozwoju - nowa sekcja
        st.markdown("---")
        st.markdown("### Materia≈Çy i zasoby do rozwoju")
        
        resources = neuroleader_manager.get_resources_for_type(dominant_type["id"])
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìö Polecane ksiƒÖ≈ºki")
            for book in resources.get("ksiƒÖ≈ºki", []):
                st.markdown(f"- {book}")
                
            st.markdown("#### üèãÔ∏è ƒÜwiczenia rozwojowe")
            for exercise in resources.get("ƒáwiczenia", []):
                st.markdown(f"- {exercise}")
        
        with col2:
            st.markdown("#### üéì Polecane kursy")
            for course in resources.get("kursy", []):
                st.markdown(f"- {course}")
                
            st.markdown("#### üõ†Ô∏è Przydatne materia≈Çy")
            for material in resources.get("materia≈Çy", []):
                st.markdown(f"- {material}")
        
        # Przycisk do ponownego testu
        st.markdown("---")
        if st.button("Wype≈Çnij test ponownie", key="btn_retest"):
            st.session_state.test_results = None
            go_to_test()
            st.rerun()
    else:
        st.info("Nie masz jeszcze wynik√≥w testu. Przejd≈∫ do zak≈Çadki 'Test Typu', aby przeprowadziƒá diagnozƒô swojego typu neuroliderskiego.")
        if st.button("Przejd≈∫ do testu", key="btn_go_to_test2"):
            go_to_test()
            st.rerun()
